如何在一个包含 n 个数据的数组中，查找前 K 大数据呢？

１，先从n个数据中找出k个数构造一个小顶堆
２，遍历数组，从数组中取出数据与堆顶元素进行比较
    如果小于堆顶元素：不做处理
    如果大于堆顶元素：将堆顶元素去掉，并将新元素加入堆中（保持小顶堆）
３，数组遍历完，那这个小顶堆就是要找的top k个数据了


演化下：10 亿个搜索关键词的日志文件，如何快速获取到 Top 10 最热门的搜索关键词
第一种情形：所有数据单机可以放下
１，先将所有词使用散列记录，接着扫描10亿关键词，记录每个词出现的次数
２，使用上面说的求前top k的方法，通过次数比较堆顶数据，达到最终结果

第二种情形：如果数据单机放不下
可以扫描一次所有数据，通过hash将数据分到多台机器上，然后按第一次情形求出结果
－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－

有一个 1GB 大小的文件，文件里每一行是一个词，每个词的大小不超过 16B，内存大小限制是 1MB，
要求返回频数最高的 100 个词(Top 100)

１，首先遍历大文件，对遍历到的每个词x，执行 hash(x) % 5000，将结果为 i 的词存放到文件 Ai 中。
遍历结束后，我们可以得到 5000 个小文件。每个小文件的大小为 200KB 左右。
２，接着统计每个小文件中出现频数最高的 100 个词。最简单的方式是使用 HashMap 来实现，对于遍历到的词 x，
如果在 map 中不存在，则执行 map.put(x, 1)；若存在，则执行 map.put(x, map.get(x)+1)，将该词频数加 1
３，通过维护一个小顶堆来找出所有词中出现频数最高的 100个，依次遍历每个小文件，构建一个小顶堆，堆大小为 100。
如果遍历到的词的出现次数大于堆顶词的出现次数，则用新词替换堆顶的词（保留下来的都是大的），然后重新调整为小顶堆，
遍历结束后，小顶堆上的词就是出现频数最高的 100 个词

思路：
分而治之，进行哈希取余，文件分割；
使用 HashMap 统计频数；
求解最大的 TopN 个，用小顶堆；求解最小的 TopN 个，用大顶堆。